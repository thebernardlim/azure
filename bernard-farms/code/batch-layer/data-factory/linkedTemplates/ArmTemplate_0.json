{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "bl-farms-data-factory"
        },
        "AzureDataLakeStorage_LinkedService_accountKey": {
            "type": "secureString",
            "metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_LinkedService'"
        },
        "AzureSynapseAnalytics1_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
        },
        "AzureBlobStorage1_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
        },
        "AzureDatabricks1_accessToken": {
            "type": "secureString",
            "metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
        },
        "AzureDataLakeStorage_LinkedService_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://blfarmsdatalake.dfs.core.windows.net"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_LinkedService')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('AzureDataLakeStorage_LinkedService_properties_typeProperties_url')]",
                    "accountKey": {
                        "type": "SecureString",
                        "value": "[parameters('AzureDataLakeStorage_LinkedService_accountKey')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDW",
                "typeProperties": {
                    "connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureDatabricks",
                "typeProperties": {
                    "domain": "https://eastasia.azuredatabricks.net",
                    "accessToken": {
                        "type": "SecureString",
                        "value": "[parameters('AzureDatabricks1_accessToken')]"
                    },
                    "existingClusterId": "0108-085704-apply31"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics_Table')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSynapseAnalytics1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlDWTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "fields"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Daily_Harvesting_File')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_LinkedService",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": "harvesting-data"
                    },
                    "columnDelimiter": "|",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "field_id",
                        "type": "String"
                    },
                    {
                        "name": "harvested",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LinkedService')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Events_CSV')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage_LinkedService",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "sprinklerevents",
                        "fileSystem": "water-sprinkler-events-csv"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "amount",
                        "type": "String"
                    },
                    {
                        "name": "field_id",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_LinkedService')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLake to DWH')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Daily_Harvesting_File",
                                "type": "DatasetReference"
                            },
                            "name": "datalakedailyharvest",
                            "typeProperties": {}
                        },
                        {
                            "dataset": {
                                "referenceName": "Events_CSV",
                                "type": "DatasetReference"
                            },
                            "name": "datalakesprinkler",
                            "typeProperties": {}
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AzureSynapseAnalytics_Table",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Join1"
                        },
                        {
                            "name": "GetDate"
                        },
                        {
                            "name": "RemoveUnusedColumns"
                        },
                        {
                            "name": "Select1"
                        }
                    ],
                    "script": "source(output(\n\t\tfield_id as short,\n\t\tharvested as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename') ~> datalakedailyharvest\nsource(output(\n\t\tamount as decimal(10,0),\n\t\tfield_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> datalakesprinkler\nRemoveUnusedColumns, datalakesprinkler join(RemoveUnusedColumns@field_id == datalakesprinkler@field_id,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\ndatalakedailyharvest derive(date = substring(filename, 2, 8)) ~> GetDate\nGetDate select(mapColumn(\n\t\tfield_id,\n\t\tharvested,\n\t\tdate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveUnusedColumns\nJoin1 select(mapColumn(\n\t\tharvested,\n\t\tdate,\n\t\tamount,\n\t\tfield_id = {datalakesprinkler@field_id}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(deletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tsaveMode:'overwrite') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Daily_Harvesting_File')]",
                "[concat(variables('factoryId'), '/datasets/Events_CSV')]",
                "[concat(variables('factoryId'), '/datasets/AzureSynapseAnalytics_Table')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLake_to_DWH')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "DataLake to DWH",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Notebook1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "DataLake to DWH",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "datalakedailyharvest": {},
                                    "datalakesprinkler": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {
                                "linkedService": {
                                    "referenceName": "AzureBlobStorage1",
                                    "type": "LinkedServiceReference"
                                },
                                "folderPath": "staging-storage-folder"
                            },
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            }
                        }
                    },
                    {
                        "name": "Notebook1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/Users/bernard.chye.h.lim@avanade.com/bl-farms-notebook"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureDatabricks1",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/DataLake to DWH')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
            ]
        }
    ]
}